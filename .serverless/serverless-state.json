{
  "service": {
    "service": "aurora-serverless-1",
    "serviceObject": {
      "name": "aurora-serverless-1"
    },
    "provider": {
      "stage": "test",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "region": "us-east-1",
      "memorySize": 256,
      "runtime": "nodejs10.x",
      "role": "LambdaRole",
      "profile": "personal",
      "environment": {
        "DB_NAME": "testAurora",
        "SECRET_ARN": {
          "Ref": "SecretManager"
        },
        "CLUSTER_ARN": "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:#{AuroraRDSCluster}",
        "PWD": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "SecretManager"
              },
              ":SecretString:password}}"
            ]
          ]
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "rds-data:ExecuteSql"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aurora-serverless-1-test-hello"
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aurora-serverless-1/test/1575631163207-2019-12-06T11:19:23.207Z/aurora-serverless-1.zip"
              },
              "FunctionName": "aurora-serverless-1-test-hello",
              "Handler": "handler.hello",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "LambdaRole",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_NAME": "testAurora",
                  "SECRET_ARN": {
                    "Ref": "SecretManager"
                  },
                  "CLUSTER_ARN": {
                    "Fn::Sub": "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraRDSCluster}"
                  },
                  "PWD": {
                    "Fn::Join": [
                      "",
                      [
                        "{{resolve:secretsmanager:",
                        {
                          "Ref": "SecretManager"
                        },
                        ":SecretString:password}}"
                      ]
                    ]
                  }
                }
              }
            },
            "DependsOn": [
              "HelloLogGroup",
              "LambdaRole"
            ]
          },
          "HelloLambdaVersionDZBvayGjvC0cx4KZ03YN7nYqg4IUm7AC0bzeVAzaGCc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "lGO3NTHyEeLwQDHkyF/uJYr3d8o32Ic7C5K/zLe74js="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "test-aurora-serverless-1",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1575631158409": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "test"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodGet"
            ]
          },
          "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "sts:AssumeRole",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    }
                  }
                ],
                "Version": "2012-10-17"
              },
              "Policies": [
                {
                  "PolicyName": "CanLog",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "SecretManager",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "secretsmanager:GetSecretValue,",
                          "secretsmanager:PutResourcePolicy,",
                          "secretsmanager:PutSecretValue,",
                          "secretsmanager:DeleteSecret,",
                          "secretsmanager:DescribeSecret,",
                          "secretsmanager:TagResource"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "RDSData",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "rds-data:BatchExecuteStatement",
                          "rds-data:BeginTransaction",
                          "rds-data:CommitTransaction",
                          "rds-data:ExecuteStatement",
                          "rds-data:RollbackTransaction"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                },
                {
                  "PolicyName": "LambdaInvoke",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ServerlessInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessInternetGateway"
                }
              ]
            }
          },
          "ServerlessVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": "10.0.0.0/16",
              "EnableDnsSupport": true,
              "EnableDnsHostnames": true,
              "InstanceTenancy": "default",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessVPC"
                }
              ]
            }
          },
          "ServerlessVPCGA": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "InternetGatewayId": {
                "Ref": "ServerlessInternetGateway"
              }
            }
          },
          "ServerlessSubnetA": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "AvailabilityZone": "us-east-1a",
              "CidrBlock": "10.0.0.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetA"
                }
              ]
            }
          },
          "ServerlessSubnetB": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "AvailabilityZone": "us-east-1b",
              "CidrBlock": "10.0.1.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetB"
                }
              ]
            }
          },
          "ServerlessSubnetC": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "AvailabilityZone": "us-east-1c",
              "CidrBlock": "10.0.2.0/24",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetC"
                }
              ]
            }
          },
          "ServerlessSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
              "DBSubnetGroupDescription": "RDS Subnet Group",
              "SubnetIds": [
                {
                  "Ref": "ServerlessSubnetA"
                },
                {
                  "Ref": "ServerlessSubnetB"
                },
                {
                  "Ref": "ServerlessSubnetC"
                }
              ],
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSubnetGroup"
                }
              ]
            }
          },
          "ServerlessSecurityGroup": {
            "DependsOn": "ServerlessVPC",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "SecurityGroup for Serverless Functions",
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "0",
                  "ToPort": "65535",
                  "CidrIp": "0.0.0.0/0"
                }
              ],
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "ServerlessSecurityGroup"
                }
              ]
            }
          },
          "RouteTablePublic": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "ServerlessVPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "public-route"
                }
              ]
            }
          },
          "RoutePublic": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "ServerlessInternetGateway"
              },
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              }
            }
          },
          "RouteTableAssociationSubnetA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              },
              "SubnetId": {
                "Ref": "ServerlessSubnetA"
              }
            }
          },
          "RouteTableAssociationSubnetB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              },
              "SubnetId": {
                "Ref": "ServerlessSubnetB"
              }
            }
          },
          "RouteTableAssociationSubnetC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "RouteTableId": {
                "Ref": "RouteTablePublic"
              },
              "SubnetId": {
                "Ref": "ServerlessSubnetC"
              }
            }
          },
          "AuroraRDSClusterParameter": {
            "Type": "AWS::RDS::DBClusterParameterGroup",
            "Properties": {
              "Description": "Parameter group for the Serverless Aurora RDS DB.",
              "Family": "aurora5.6",
              "Parameters": {
                "character_set_database": "utf32"
              }
            }
          },
          "AuroraRDSCluster": {
            "Type": "AWS::RDS::DBCluster",
            "Properties": {
              "MasterUsername": {
                "Fn::Join": [
                  "",
                  [
                    "{{resolve:secretsmanager:",
                    {
                      "Ref": "SecretManager"
                    },
                    ":SecretString:username}}"
                  ]
                ]
              },
              "MasterUserPassword": {
                "Fn::Join": [
                  "",
                  [
                    "{{resolve:secretsmanager:",
                    {
                      "Ref": "SecretManager"
                    },
                    ":SecretString:password}}"
                  ]
                ]
              },
              "DBSubnetGroupName": {
                "Ref": "ServerlessSubnetGroup"
              },
              "Engine": "aurora",
              "EngineMode": "serverless",
              "EngineVersion": "5.6",
              "EnableHttpEndpoint": true,
              "DatabaseName": "testAurora",
              "BackupRetentionPeriod": 1,
              "ScalingConfiguration": {
                "AutoPause": false
              },
              "DBClusterParameterGroupName": {
                "Ref": "AuroraRDSClusterParameter"
              },
              "VpcSecurityGroupIds": [
                {
                  "Ref": "ServerlessSecurityGroup"
                }
              ]
            }
          },
          "SecretManager": {
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
              "Name": "test-testAurora",
              "Description": "This secret has a dynamically generated secret password.",
              "GenerateSecretString": {
                "SecretStringTemplate": "{\"username\": \"admin\"}",
                "GenerateStringKey": "password",
                "PasswordLength": 30,
                "ExcludeCharacters": "\"@/\\"
              },
              "Tags": [
                {
                  "Key": "AppName",
                  "Value": "testAurora"
                }
              ]
            }
          },
          "SecretRDSInstanceAttachment": {
            "Type": "AWS::SecretsManager::SecretTargetAttachment",
            "Properties": {
              "SecretId": {
                "Ref": "SecretManager"
              },
              "TargetId": {
                "Ref": "AuroraRDSCluster"
              },
              "TargetType": "AWS::RDS::DBCluster"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionDZBvayGjvC0cx4KZ03YN7nYqg4IUm7AC0bzeVAzaGCc"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/test"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "DB_NAME": "testAurora",
      "AURORA": {
        "VPC_CIDR": 10
      }
    },
    "plugins": [
      "serverless-pseudo-parameters"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "memorySize": 128,
        "handler": "handler.hello",
        "events": [
          {
            "http": {
              "path": "",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aurora-serverless-1-test-hello",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "LambdaRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "Policies": [
              {
                "PolicyName": "CanLog",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "SecretManager",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue,",
                        "secretsmanager:PutResourcePolicy,",
                        "secretsmanager:PutSecretValue,",
                        "secretsmanager:DeleteSecret,",
                        "secretsmanager:DescribeSecret,",
                        "secretsmanager:TagResource"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "RDSData",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "rds-data:BatchExecuteStatement",
                        "rds-data:BeginTransaction",
                        "rds-data:CommitTransaction",
                        "rds-data:ExecuteStatement",
                        "rds-data:RollbackTransaction"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              {
                "PolicyName": "LambdaInvoke",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:InvokeFunction"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "ServerlessInternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessInternetGateway"
              }
            ]
          }
        },
        "ServerlessVPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "10.0.0.0/16",
            "EnableDnsSupport": true,
            "EnableDnsHostnames": true,
            "InstanceTenancy": "default",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessVPC"
              }
            ]
          }
        },
        "ServerlessVPCGA": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "InternetGatewayId": {
              "Ref": "ServerlessInternetGateway"
            }
          }
        },
        "ServerlessSubnetA": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "AvailabilityZone": "us-east-1a",
            "CidrBlock": "10.0.0.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetA"
              }
            ]
          }
        },
        "ServerlessSubnetB": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "AvailabilityZone": "us-east-1b",
            "CidrBlock": "10.0.1.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetB"
              }
            ]
          }
        },
        "ServerlessSubnetC": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "AvailabilityZone": "us-east-1c",
            "CidrBlock": "10.0.2.0/24",
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetC"
              }
            ]
          }
        },
        "ServerlessSubnetGroup": {
          "Type": "AWS::RDS::DBSubnetGroup",
          "Properties": {
            "DBSubnetGroupDescription": "RDS Subnet Group",
            "SubnetIds": [
              {
                "Ref": "ServerlessSubnetA"
              },
              {
                "Ref": "ServerlessSubnetB"
              },
              {
                "Ref": "ServerlessSubnetC"
              }
            ],
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSubnetGroup"
              }
            ]
          }
        },
        "ServerlessSecurityGroup": {
          "DependsOn": "ServerlessVPC",
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "SecurityGroup for Serverless Functions",
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "0",
                "ToPort": "65535",
                "CidrIp": "0.0.0.0/0"
              }
            ],
            "Tags": [
              {
                "Key": "Name",
                "Value": "ServerlessSecurityGroup"
              }
            ]
          }
        },
        "RouteTablePublic": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "ServerlessVPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "public-route"
              }
            ]
          }
        },
        "RoutePublic": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "ServerlessInternetGateway"
            },
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            }
          }
        },
        "RouteTableAssociationSubnetA": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            },
            "SubnetId": {
              "Ref": "ServerlessSubnetA"
            }
          }
        },
        "RouteTableAssociationSubnetB": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            },
            "SubnetId": {
              "Ref": "ServerlessSubnetB"
            }
          }
        },
        "RouteTableAssociationSubnetC": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "RouteTableId": {
              "Ref": "RouteTablePublic"
            },
            "SubnetId": {
              "Ref": "ServerlessSubnetC"
            }
          }
        },
        "AuroraRDSClusterParameter": {
          "Type": "AWS::RDS::DBClusterParameterGroup",
          "Properties": {
            "Description": "Parameter group for the Serverless Aurora RDS DB.",
            "Family": "aurora5.6",
            "Parameters": {
              "character_set_database": "utf32"
            }
          }
        },
        "AuroraRDSCluster": {
          "Type": "AWS::RDS::DBCluster",
          "Properties": {
            "MasterUsername": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "SecretManager"
                  },
                  ":SecretString:username}}"
                ]
              ]
            },
            "MasterUserPassword": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "SecretManager"
                  },
                  ":SecretString:password}}"
                ]
              ]
            },
            "DBSubnetGroupName": {
              "Ref": "ServerlessSubnetGroup"
            },
            "Engine": "aurora",
            "EngineMode": "serverless",
            "EngineVersion": "5.6",
            "EnableHttpEndpoint": true,
            "DatabaseName": "testAurora",
            "BackupRetentionPeriod": 1,
            "ScalingConfiguration": {
              "AutoPause": false
            },
            "DBClusterParameterGroupName": {
              "Ref": "AuroraRDSClusterParameter"
            },
            "VpcSecurityGroupIds": [
              {
                "Ref": "ServerlessSecurityGroup"
              }
            ]
          }
        },
        "SecretManager": {
          "Type": "AWS::SecretsManager::Secret",
          "Properties": {
            "Name": "test-testAurora",
            "Description": "This secret has a dynamically generated secret password.",
            "GenerateSecretString": {
              "SecretStringTemplate": "{\"username\": \"admin\"}",
              "GenerateStringKey": "password",
              "PasswordLength": 30,
              "ExcludeCharacters": "\"@/\\"
            },
            "Tags": [
              {
                "Key": "AppName",
                "Value": "testAurora"
              }
            ]
          }
        },
        "SecretRDSInstanceAttachment": {
          "Type": "AWS::SecretsManager::SecretTargetAttachment",
          "Properties": {
            "SecretId": {
              "Ref": "SecretManager"
            },
            "TargetId": {
              "Ref": "AuroraRDSCluster"
            },
            "TargetType": "AWS::RDS::DBCluster"
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/Users/krishna/code/play-ground/aurora-serverless-test/.serverless/aurora-serverless-1.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/aurora-serverless-1/test/1575631163207-2019-12-06T11:19:23.207Z",
    "artifact": "aurora-serverless-1.zip"
  }
}